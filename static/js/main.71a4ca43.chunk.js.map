{"version":3,"sources":["actions/index.js","actions/types.js","components/Message.js","components/Nav.js","components/Post.js","components/PostList.js","containers/Root.js","components/App.js","reducers/index.js","services/Api.js","sagas/index.js","index.js"],"names":["fetchPosts","event","type","payload","subreddit","target","value","message","className","onInput","onSubmit","preventDefault","placeholder","name","title","key","he","decode","posts","map","Post","connect","state","dispatch","bindActionCreators","Nav","Message","PostList","initialState","fetch","then","response","json","data","children","x","fetchPostsAsync","action","put","call","Api","rootSaga","debounce","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","Root","document","getElementById"],"mappings":"iRAEaA,EAAa,SAAAC,GACtB,MAAO,CACHC,KCJmB,cDKnBC,QAAS,CACLC,UAAWH,EAAMI,OAAOC,SEJrB,kBAAGC,EAAH,EAAGA,QAAH,OACX,6BACI,wBAAIC,UAAU,gCACTD,KCHE,kBAAGE,EAAH,EAAGA,QAAH,OACX,6BACI,0BAAMD,UAAU,SACZ,uBAAGA,UAAU,wBADjB,wBAGA,yBAAKA,UAAU,QACX,0BAAME,SAAU,SAAAT,GAAK,OAAIA,EAAMU,mBAC3B,2BAAOT,KAAK,OAAOU,YAAY,YAAYH,QAASA,Q,iBCNrD,kBAAGI,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACX,wBAAIC,IAAKF,GACL,4BAAKG,IAAGC,OAAOH,MCDR,kBAAGI,EAAH,EAAGA,MAAOd,EAAV,EAAUA,UAAV,OACX,6BACI,2BAAOI,UAAU,oCACb,+BACI,4BACI,kCAAQJ,KAGhB,+BACKc,EAAMC,IAAIC,O,4NCCZC,kBAJf,SAAyBC,GACrB,O,qVAAO,CAAP,GAAYA,IALhB,SAA4BC,GACxB,OAAOC,YAAmB,CAAExB,cAAcuB,IAO/BF,CCRA,gBAAGrB,EAAH,EAAGA,WAAYO,EAAf,EAAeA,QAASW,EAAxB,EAAwBA,MAAOd,EAA/B,EAA+BA,UAA/B,OACX,6BACI,kBAACqB,EAAD,CAAKhB,QAAST,IACd,yBAAKQ,UAAU,aACX,8BACA,6BACKD,GACG,kBAACmB,EAAD,CAASnB,QAASA,IAErBW,GACG,kBAACS,EAAD,CAAUT,MAAOA,EAAOd,UAAWA,KAG3C,kC,mjBCjBZ,IAAMwB,EAAe,CACjBrB,QAAS,2C,wBCHE,WACAH,GACP,OAAOyB,MAAM,4BAAD,OAA6BzB,EAA7B,UACP0B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKC,SAASf,IAAI,SAAAgB,GAAC,OAAIA,EAAEF,UCClDG,EAAe,SAAG,SAAlBA,EAA6BC,GAAX,6EACZjC,EAAciC,EAAOlC,QAArBC,UADY,gBAIT,OAJS,SAIHkC,YAAI,CAAEpC,KTNN,USEG,+CAQF,OARE,kBAQIqC,YAAKC,EAAgBpC,GARzB,OAShB,OADMc,EARU,iBASVoB,YAAI,CAAEpC,KTZe,sBSYYC,QAAS,CAAEe,QAAOd,eATzC,gCAYhB,OAZgB,0BAWVG,EAXU,yBAWkBH,EAXlB,6BAYVkC,YAAI,CAAEpC,KThBc,qBSgBYC,QAAS,CAAEI,aAZjC,oCAAlB6B,EAAkB,iBAgBXK,EAAQ,SAAG,SAAXA,IAAW,gEACpB,OADoB,SACdC,YAAS,ITtBQ,cSsBUN,GADb,mCAAXK,KCVPE,EAAiBC,cACjBC,EAAQC,YHNS,WAAmC,IAAlCxB,EAAiC,uDAAzBM,EAAcS,EAAW,uCACrD,OAAQA,EAAOnC,MACX,IPP0B,qBOQtB,MAAO,CACHK,QAAS8B,EAAOlC,QAAQI,SAGhC,IPX2B,sBOYvB,MAAO,CACHW,MAAOmB,EAAOlC,QAAQe,MACtBd,UAAWiC,EAAOlC,QAAQC,WAGlC,IPhBa,QOiBT,OAAO,KACAwB,GAGX,QACI,OAAON,IGbgByB,YAAgBJ,IACnDA,EAAeK,IAAIP,GAEnBQ,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAACM,EAAD,OACSC,SAASC,eAAe,W","file":"static/js/main.71a4ca43.chunk.js","sourcesContent":["import { FETCH_POSTS } from './types';\r\n\r\nexport const fetchPosts = event => {\r\n    return {\r\n        type: FETCH_POSTS,\r\n        payload: {\r\n            subreddit: event.target.value\r\n        }\r\n    }\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const FETCH_POSTS_FAILED = 'FETCH_POSTS_FAILED';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const RESET = 'RESET';","import React from 'react';\r\n\r\nexport default ({ message }) => (\r\n    <div>\r\n        <h3 className=\"text-center color-light-gray\">\r\n            {message}\r\n        </h3>\r\n    </div>\r\n);","import React from 'react';\r\n\r\nexport default ({ onInput }) => (\r\n    <nav>\r\n        <span className=\"brand\">\r\n            <i className=\"fab fa-2x fa-reddit\"></i> React Reddit Viewer\r\n        </span>\r\n        <div className=\"menu\">\r\n            <form onSubmit={event => event.preventDefault()}>\r\n                <input type=\"text\" placeholder=\"subreddit\" onInput={onInput} />\r\n            </form>\r\n        </div>\r\n    </nav>\r\n);","import React from 'react';\r\nimport he from 'he';\r\n\r\nexport default ({ name, title }) => (\r\n    <tr key={name}>\r\n        <td>{he.decode(title)}</td>\r\n    </tr>\r\n);","import React from 'react';\r\n\r\nimport Post from './Post';\r\n\r\nexport default ({ posts, subreddit }) => (\r\n    <div>\r\n        <table className=\"width-full bg-white shadow-light\">\r\n            <thead>\r\n                <tr>\r\n                    <th>/r/{subreddit}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {posts.map(Post)}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n);","import { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPosts } from '../actions';\r\nimport App from '../components/App';\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ fetchPosts }, dispatch);\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { ...state };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\r\n\r\nimport Message from './Message';\r\nimport Nav from './Nav';\r\nimport PostList from './PostList';\r\n\r\nexport default ({ fetchPosts, message, posts, subreddit }) => (\r\n    <div>\r\n        <Nav onInput={fetchPosts} />\r\n        <div className=\"flex pt-4\">\r\n            <div></div>\r\n            <div>\r\n                {message && \r\n                    <Message message={message} />\r\n                }\r\n                {posts &&\r\n                    <PostList posts={posts} subreddit={subreddit} />\r\n                }\r\n            </div>\r\n            <div></div>\r\n        </div>\r\n    </div>\r\n);","import { FETCH_POSTS_FAILED, FETCH_POSTS_SUCCESS, RESET } from '../actions/types';\r\n\r\nconst initialState = {\r\n    message: 'Please enter a subreddit to view posts.'\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_POSTS_FAILED:\r\n            return {\r\n                message: action.payload.message\r\n            };\r\n\r\n        case FETCH_POSTS_SUCCESS:\r\n            return {\r\n                posts: action.payload.posts,\r\n                subreddit: action.payload.subreddit\r\n            };\r\n\r\n        case RESET:\r\n            return {\r\n                ...initialState\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};","export default {\r\n    fetchPosts(subreddit) {\r\n        return fetch(`https://www.reddit.com/r/${subreddit}.json`)\r\n            .then(response => response.json())\r\n            .then(json => json.data.children.map(x => x.data));\r\n    }\r\n};","import { call, debounce, put } from 'redux-saga/effects';\r\n\r\nimport { FETCH_POSTS, FETCH_POSTS_FAILED, FETCH_POSTS_SUCCESS, RESET } from '../actions/types';\r\nimport Api from '../services/Api';\r\n\r\nconst fetchPostsAsync = function* (action) {\r\n    const { subreddit } = action.payload;\r\n\r\n    if (!subreddit) {\r\n        return yield put({ type: RESET });\r\n    }\r\n\r\n    try {\r\n        const posts = yield call(Api.fetchPosts, subreddit);\r\n        yield put({ type: FETCH_POSTS_SUCCESS, payload: { posts, subreddit } });\r\n    } catch (error) {\r\n        const message = `The subreddit '${subreddit}' is not valid.`;\r\n        yield put({ type: FETCH_POSTS_FAILED, payload: { message } });\r\n    }\r\n}\r\n\r\nexport const rootSaga = function* () {\r\n    yield debounce(500, FETCH_POSTS, fetchPostsAsync);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport './index.css';\r\nimport Root from './containers/Root';\r\nimport { reducer } from './reducers';\r\nimport { rootSaga } from './sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Root />\r\n    </Provider>, document.getElementById('root'));"],"sourceRoot":""}